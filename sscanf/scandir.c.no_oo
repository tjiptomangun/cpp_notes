#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <regex.h>
int datatype;
#define DT_TYPE_STR  1
#define DT_TYPE_NUM  2

#define LOCAL_BUFF_SIZE 40


/***
scandir
This program will read a pattern from first argument of command line, 
go to a directory defined in second argument
and then it will interpret file names in that directory and store values 
to appropriate variable.
There are 5 string of integer variable and 5 string of alphanumneric variable
$CC Wall -ggdb scanstring.c -o scanstring

*/



//make list /array of parsed argc string here
//it should be dynamic structure instead of array of static size.
//We may be need it next time, or it will be combinable in the future.


int setInt ( int *nOut,  char *szIn )
{
	* nOut = atoi ( szIn );
	return 0;
}
int setIntTempl( int *nOut, int nSize, char *szIn, int nLen)
{
	setInt (nOut, szIn);
	return 0;
}
int setString ( char *szOut , int nOutSize, char *szIn , int nInLen)
{
	strncpy ( szOut, szIn, (nInLen>nOutSize )? nOutSize:nInLen);
	return 0;
}
int setVoid ( void *Out, void *In)
{
	return 0;
}
int setVoid2 (unsigned char *out, char *szIn)
{
	return 0;
}
//int (* setValFun []) (unsigned char * out , int outLen, char *szIn, int inLen)  =
int  n1stInt,n2ndInt,n3rdInt,n4thInt,n5thInt;

char szPKeyFieldName[LOCAL_BUFF_SIZE]={'\0'};
char szStringFieldName[LOCAL_BUFF_SIZE]={'\0'};
char sz2ndStringFieldName[LOCAL_BUFF_SIZE]={'\0'};
char sz3rdStringFieldName[LOCAL_BUFF_SIZE]={'\0'};
char sz4thStringFieldName[LOCAL_BUFF_SIZE]={'\0'};
char sz5thStringFieldName[LOCAL_BUFF_SIZE]={'\0'};
char szBlobFieldName[LOCAL_BUFF_SIZE]={'\0'};
char szPKeyValue[LOCAL_BUFF_SIZE]={'\0'};
char szStringValue[LOCAL_BUFF_SIZE]={'\0'};
char sz2ndStringValue[LOCAL_BUFF_SIZE]={'\0'};
char sz3rdStringValue[LOCAL_BUFF_SIZE]={'\0'};
char sz4thStringValue[LOCAL_BUFF_SIZE]={'\0'};
char sz5thStringValue[LOCAL_BUFF_SIZE]={'\0'};
char szExprtFlnm[255]={'\0'};
char sz1stIntName[LOCAL_BUFF_SIZE]={'\0'};
char sz1stIntValue[LOCAL_BUFF_SIZE]={'\0'};
char sz2ndIntName[LOCAL_BUFF_SIZE]={'\0'};
char sz2ndIntValue[LOCAL_BUFF_SIZE]={'\0'};
char sz3rdIntName[LOCAL_BUFF_SIZE]={'\0'};
char sz3rdIntValue[LOCAL_BUFF_SIZE]={'\0'};
char sz4thIntName[LOCAL_BUFF_SIZE]={'\0'};
char sz4thIntValue[LOCAL_BUFF_SIZE]={'\0'};
char sz5thIntName[LOCAL_BUFF_SIZE]={'\0'};
char sz5thIntValue[LOCAL_BUFF_SIZE]={'\0'};
typedef struct var_struct
{
	char * optPtrVal;
	int varsout_len;
	int (* setValFun )();
	char replacement_char;
} VAR_STRUCT;

VAR_STRUCT optvars[] = 
{
	{  (char *) &n5thInt,  sizeof (int ), setIntTempl, 'd'},  //a
	{  0, -1, 0, 0 },//b
	{  0, -1, 0, 0 },//c
	{  (char *) sz2ndStringValue, LOCAL_BUFF_SIZE, setString, 's'}, //d
	{  0, -1, 0, 0 },
	{  0, -1, 0, 0 },
	{  (char *) &n4thInt, sizeof (int ), setIntTempl, 'd'}, //g
	{  0, -1, 0, 0 }, 
	{  0, -1, 0, 0 },
	{  (char *) sz4thStringValue, LOCAL_BUFF_SIZE, setString, 's'},//j
	{  (char *) sz5thStringValue, LOCAL_BUFF_SIZE, setString, 's'},//k
	{  0, -1, 0, 0 },
	{  (char *) &n1stInt, sizeof (int ), setIntTempl ,'d'},//m
	{  (char *) &n2ndInt, sizeof (int ), setIntTempl ,'d'},//n
	{  (char *) &n3rdInt, sizeof (int ), setIntTempl ,'d'},//o
	{  (char *) szPKeyValue, LOCAL_BUFF_SIZE, setString, 's'}, //p
	{  0, -1, 0, 0 },
	{  (char *) sz3rdStringValue, LOCAL_BUFF_SIZE, setString , 's'},//r
	{  (char *) szStringValue, LOCAL_BUFF_SIZE, setString, 's'},//s
	{  0, -1, 0, 0 },
	{  0, -1, 0, 0 },
	{  0, -1, 0, 0 },
	{  0, -1, 0, 0 },
	{  0, -1, 0, 0 },
	{  0, -1, 0, 0 },
	{  0, -1, 0, 0 }
};
/*
char * optPtrVal[]=
{  (char *)&n5thInt,//'a'
   (char *)0,//'b'
   (char *)0,//'c'
   (char *)sz2ndStringValue,//'d'
   (char *)0,//'e'
   (char *)0,//'f'
   (char *)&n4thInt,//'g'
   (char *)0,//'h'
   (char *)0,//'i'
   (char *)sz4thStringValue,//'j'
   (char *)sz5thStringValue,//'k'
   (char *)0,//'l'
   (char *)&n1stInt,//'m'
   (char *)&n2ndInt,//'n'
   (char *)&n3rdInt,//'o'
   (char *)szPKeyValue,//'p'
   (char *)0,//'q'
   (char *)sz3rdStringValue,//'r'
   (char *)szStringValue,//'s'
   (char *)0,//'t'
   (char *)0,//'u'
   (char *)0,//'v'
   (char *)0,//'w'
   (char *)0,//'x'
   (char *)0,//'y'
   (char *)0//'z'
};
int varsout_len[] = 
{
	sizeof (int ), -1,-1,//c
	LOCAL_BUFF_SIZE, //d
	-1, -1, sizeof( int ), //g
	-1, -1, //i
	LOCAL_BUFF_SIZE,//j
	LOCAL_BUFF_SIZE,//k
	-1,//l
	sizeof (int ), sizeof(int), sizeof(int),//o
	LOCAL_BUFF_SIZE, -1,//q
	LOCAL_BUFF_SIZE, LOCAL_BUFF_SIZE, //s
	-1, -1, -1, -1, -1, -1, 1
	

};

int (* setValFun []) ()  =
{
	setIntTempl, //a
	0, 0,
	setString, //d
	0, 0,
	setIntTempl, //g
	0,0,	//i
	setString,	//j
	setString, 	//k
	0,	//l
	setIntTempl, //m
	setIntTempl, //n
	setIntTempl, //o
	setString, //p
	0, //q
	setString, //r
	setString, //s
	0,0,0,0,0,0,0
	
};
char replacement_char[] =
{
 'd', //a
  0,0,
 's',//d
  0,0,
 'd', //g
  0,0,//i
  's','s', //k
  0,
  'd','d','d', //o
  's',//p
  0,'s','s', //s
  0,0,0,0,0,0,0
};
*/
typedef struct evaluate_vars
{
	char replacement_char;
	char funIndex;
	int  nvarsout_len;
	char *vars_out;
	char *strIn;
} EVALUATE_VARS;
#define MAX_EVALVARS 20 
int numEvaluationVars = 0;

EVALUATE_VARS vars[MAX_EVALVARS];


;


int set1stInt( char * szIn )
{
	return setInt ( &n1stInt, sz1stIntValue );
}
/*
 * a static array of array of chars
 * with a pointer to function that will assign/cast stream into appropriate variable
 *  
 */

int printRegCompErr(int reti)
{
  switch(reti)
  {
    case REG_BADBR:
      printf("Invalid use of back reference operator.\n");
      break;
    case REG_BADPAT:
      printf("Invalid use of pattern operators such as group or list.\n");
      break;
    case REG_BADRPT:
      printf(" Invalid use of repetition operators such as using '*' as the first character.\n");
      break;
    case REG_EBRACE:
      printf("Un-matched brace interval operators.\n");
      break;
    case REG_EBRACK:
      printf("Un-matched bracket list operators.\n");
      break;
    case REG_ECOLLATE:
      printf("Invalid collating element.\n");
      break;
    case REG_ECTYPE:
      printf("Unknown character class name.\n");
      break;
    case REG_EEND:
      printf("Non specific error.  This is not defined by POSIX.2.\n");
      break;
    case REG_EESCAPE:
      printf("Trailing backslash.\n");
      break;
    case REG_EPAREN:
      printf("Un-matched parenthesis group operators.\n");
      break;
    case REG_ERANGE:
      printf("Invalid  use  of  the range operator, e.g., the ending point of the range \n");
      printf("occurs prior to the starting point.\n");
      break;
    case REG_ESIZE:
      printf("Compiled regular expression requires a pattern buffer larger than 64Kb.\n");
      break;
    case REG_ESPACE:
      printf("The regex routines ran out of memory.\n");
      break;
    case REG_ESUBREG:
      printf("Invalid back reference to a subexpression.\n");
      break;

  }
  return 0;

}//printRegCompErr

int main ( int argc, char **argv )
{
	char * stringlist = NULL ;
	char szPatt[] = "[%%][0-9]*[adgjkmnoprs]";
	char szOutFormat [40];
	int reti = 0, i = 0, x = 0, inLen = 0;
	regex_t regex_patt;
	const size_t max_groups = 9;
	regmatch_t pm[max_groups];
	char *buff;
	char *temp  = NULL;
		
	if ( argc < 2 )
	{
		printf ("usage:  %s stringlist string to evaluate\n", argv[0]);
		printf (" stringlist format %%[0-9]*spec\n");
		printf (" valid spec values are a,d,g,j,k,m,n,o,p,r,s\n");
		printf (" a,g,m,n,o is espected to receive string of integer values\n");
		printf (" d,j,k,r,s is espected to receive string of alphanumeric values\n");
		exit ( -1);
	}
	inLen = x = strlen (argv[1]);
	stringlist = (char * ) calloc (1, x + ((x & 1) ?1: 2 ));
	temp = stringlist;
	buff = argv[1];

	reti = regcomp (&regex_patt, szPatt, REG_EXTENDED );
	if ( reti )
	{
		printRegCompErr( reti );
		regfree ( &regex_patt );
		return -1;

	}
/*
* argv -> regex parse -> replace last char with %d or %s in respect to last char. 
* Put the last char to vars list last index, increase vars list index;
*/
		
	reti = regexec ( &regex_patt, argv[1], max_groups, pm, 0 );
	while ( reti == 0 )
	{
		for ( i = 0; i < max_groups; i++ )
		{
			if ( pm[i].rm_so == -1 )
				break;	

			if ( x > 0 )	
			{
				memcpy ( temp, buff, pm[i].rm_so );


				memcpy ( temp + pm[i].rm_so, buff + pm[i].rm_so, pm[i].rm_eo - pm[i].rm_so);
				vars [numEvaluationVars].funIndex = temp[pm[i].rm_eo - 1] -'a'	;
				vars [numEvaluationVars].strIn = (char *) calloc (1, LOCAL_BUFF_SIZE);
				vars [numEvaluationVars].vars_out =  (char * )optvars[ temp[pm[i].rm_eo -1 ] -'a'].optPtrVal;
				vars [numEvaluationVars].nvarsout_len = optvars[ temp[pm[i].rm_eo - 1 ]-'a'  ].varsout_len;
				vars [numEvaluationVars].replacement_char = optvars[ temp[ pm[i].rm_eo -1  ] - 'a' ].replacement_char;
				//printf ("vars [numEvaluationVars].nvarsout_len = %d\n",  vars [numEvaluationVars].nvarsout_len);
				
					
				//printf ("orig temp[pm[%d].rm_eo - 1] = %c\n",i , temp[pm[i].rm_eo  - 1] )	;
				//printf ("buff[pm[%d].rm_eo - 1] = %c\n",i , buff[pm[i].rm_eo  - 1 ] )	;
				numEvaluationVars ++;
				//printf ("buff[ pm[%d].em_eo ] = %c\n", i, buff[pm[i].rm_eo - 1]  );

				//temp[pm[i].rm_eo - 1] = (char ) replacement_char[ (int )  buff[ pm[i].rm_eo - 1] -'a'  ];
				temp[pm[i].rm_eo - 1] = 's'; 
				//printf ("modified temp[pm[%d].rm_eo - 1] = %c\n",i , temp[pm[i].rm_eo -1])	;
				//printf ("replacement char = %c \n",replacement_char[ (int )  buff[ pm[i].rm_eo - 1] - 'a' ]);
				
				
         	buff+=pm[i].rm_eo;
         	x-=pm[i].rm_eo;
          	temp+=pm[i].rm_eo;
			}
			temp [pm[i].rm_eo +1] = 0;

		}
      reti = regexec(&regex_patt,buff,max_groups,pm,REG_NOTBOL);
		
	}
	if ( x > 0)	
	{
		memcpy ( temp, buff, x );
		temp[x] = 0;
	}
	//printf ("stringlist = %s   num pattern = %d\n", stringlist, numEvaluationVars);
	sscanf (argv[2],stringlist, vars[0].strIn, vars[1].strIn, vars[2].strIn, 
	vars[3].strIn, vars[4].strIn, vars[5].strIn, vars[6].strIn, vars[7].strIn,
	vars[8].strIn, vars[9].strIn, vars[10].strIn, vars[11].strIn);
	//sscanf (argv[2],"%20s__%6s", vars[0].strIn, vars[1].strIn, vars[2].strIn, vars[3].strIn);
	for( i = 0 ; i < numEvaluationVars; i ++)
	{
		//printf ("in %s\n\n", vars[i].strIn);	
		(optvars[(int )vars[i].funIndex]).setValFun(vars[i].vars_out, vars[i].nvarsout_len, vars[i].strIn, 
			strlen ( vars[i].strIn) );
		memset (szOutFormat, 0, 40);
		sprintf(szOutFormat,"%%%c", vars[i].replacement_char);
		//printf ("format : %s\n\n",szOutFormat);
		if (vars[i].replacement_char == 's' )
		{
			printf (szOutFormat, vars[i].vars_out);
		}
		else if (vars[i].replacement_char == 'd' )
		{
			printf (szOutFormat,  * ((int * )vars[i].vars_out) );

		}
		//printf (szOutFormat, vars[i].vars_out);
		//printf ("\n");
		//printf (szOutFormat,n5thInt); 
		printf ("\n");
	}

				
	return 0;
}
