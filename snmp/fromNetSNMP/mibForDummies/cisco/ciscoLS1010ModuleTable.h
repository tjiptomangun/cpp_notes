/*
 * Note: this file originally auto-generated by mib2c
 * using mfd-top.m2c
 */
#ifndef CISCOLS1010MODULETABLE_H
#define CISCOLS1010MODULETABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(CISCO-RHINO-MIB)
config_require(CISCO-RHINO-MIB/ciscoLS1010ModuleTable/ciscoLS1010ModuleTable_interface)
config_require(CISCO-RHINO-MIB/ciscoLS1010ModuleTable/ciscoLS1010ModuleTable_data_access)
config_require(CISCO-RHINO-MIB/ciscoLS1010ModuleTable/ciscoLS1010ModuleTable_data_get)
config_require(CISCO-RHINO-MIB/ciscoLS1010ModuleTable/ciscoLS1010ModuleTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for ciscoLS1010ModuleTable */
#include "ciscoLS1010ModuleTable_oids.h"

/* enum definions */
#include "ciscoLS1010ModuleTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_ciscoLS1010ModuleTable(void);
void shutdown_ciscoLS1010ModuleTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table ciscoLS1010ModuleTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * CISCO-RHINO-MIB::ciscoLS1010ModuleTable is subid 1 of ciscoLS1010ModuleGroup.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.9.5.11.1.2.1, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review ciscoLS1010ModuleTable registration context.
     */
typedef netsnmp_data_list ciscoLS1010ModuleTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review ciscoLS1010ModuleTable data context structure.
 * This structure is used to represent the data for ciscoLS1010ModuleTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * ciscoLS1010ModuleTable.
 */
typedef struct ciscoLS1010ModuleTable_data_s {
    
        /*
         * ciscoLS1010ModuleType(2)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   ciscoLS1010ModuleType;
    
        /*
         * ciscoLS1010ModuleSerialNumber(3)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   ciscoLS1010ModuleSerialNumber;
    
        /*
         * ciscoLS1010ModuleHwVersion(4)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   ciscoLS1010ModuleHwVersion;
    
        /*
         * ciscoLS1010ModuleSwVersion(5)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   ciscoLS1010ModuleSwVersion;
    
        /*
         * ciscoLS1010ModuleDescr(6)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   ciscoLS1010ModuleDescr[255];
size_t      ciscoLS1010ModuleDescr_len; /* # of char elements, not bytes */
    
        /*
         * ciscoLS1010ModuleNumSubModules(7)/INTEGER/ASN_INTEGER/long(long)//l/A/w/e/R/d/h
         */
   long   ciscoLS1010ModuleNumSubModules;
    
        /*
         * ciscoLS1010ModuleAdminStatus(8)/AdminStatus/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   ciscoLS1010ModuleAdminStatus;
    
        /*
         * ciscoLS1010ModuleOperStatus(9)/OperStatus/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   ciscoLS1010ModuleOperStatus;
    
        /*
         * ciscoLS1010ModuleHwVersionMinor(10)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
   u_long   ciscoLS1010ModuleHwVersionMinor;
    
        /*
         * ciscoLS1010ModuleSerialNumberString(11)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
   char   ciscoLS1010ModuleSerialNumberString[255];
size_t      ciscoLS1010ModuleSerialNumberString_len; /* # of char elements, not bytes */
    
} ciscoLS1010ModuleTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review ciscoLS1010ModuleTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef ciscoLS1010ModuleTable_data ciscoLS1010ModuleTable_undo_data;

/*
 * TODO:120:r: |-> Review ciscoLS1010ModuleTable mib index.
 * This structure is used to represent the index for ciscoLS1010ModuleTable.
 */
typedef struct ciscoLS1010ModuleTable_mib_index_s {

        /*
         * ciscoLS1010ModuleIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/a/w/e/R/d/h
         */
   long   ciscoLS1010ModuleIndex;


} ciscoLS1010ModuleTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review ciscoLS1010ModuleTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_ciscoLS1010ModuleTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review ciscoLS1010ModuleTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * ciscoLS1010ModuleTable_rowreq_ctx pointer.
 */
typedef struct ciscoLS1010ModuleTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_ciscoLS1010ModuleTable_IDX_LEN];
    
    ciscoLS1010ModuleTable_mib_index        tbl_idx;
    
    ciscoLS1010ModuleTable_data              data;
    ciscoLS1010ModuleTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to ciscoLS1010ModuleTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *ciscoLS1010ModuleTable_data_list;

} ciscoLS1010ModuleTable_rowreq_ctx;

typedef struct ciscoLS1010ModuleTable_ref_rowreq_ctx_s {
    ciscoLS1010ModuleTable_rowreq_ctx *rowreq_ctx;
} ciscoLS1010ModuleTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int ciscoLS1010ModuleTable_pre_request(ciscoLS1010ModuleTable_registration * user_context);
    int ciscoLS1010ModuleTable_post_request(ciscoLS1010ModuleTable_registration * user_context,
        int rc);

    int ciscoLS1010ModuleTable_rowreq_ctx_init(ciscoLS1010ModuleTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void ciscoLS1010ModuleTable_rowreq_ctx_cleanup(ciscoLS1010ModuleTable_rowreq_ctx *rowreq_ctx);

    int ciscoLS1010ModuleTable_commit(ciscoLS1010ModuleTable_rowreq_ctx * rowreq_ctx);

    ciscoLS1010ModuleTable_rowreq_ctx *
                  ciscoLS1010ModuleTable_row_find_by_mib_index(ciscoLS1010ModuleTable_mib_index *mib_idx);

extern const oid ciscoLS1010ModuleTable_oid[];
extern const int ciscoLS1010ModuleTable_oid_size;


#include "ciscoLS1010ModuleTable_interface.h"
#include "ciscoLS1010ModuleTable_data_access.h"
#include "ciscoLS1010ModuleTable_data_get.h"
#include "ciscoLS1010ModuleTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* CISCOLS1010MODULETABLE_H */
/** @} */
